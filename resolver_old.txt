			std::optional<float> flTempYaw = PredictBaseYaw(pEntity);
			if (!flTempYaw) { flTempYaw = Math::CalcAngle(pEntity->GetAbsOrigin(), pLocal->GetAbsOrigin()).y; }

			const float flBaseYaw = flTempYaw.value();

			switch (iYawMode){
			case 0: break;
			case 1: vAdjustedAngle.y = flBaseYaw; break;			//forward
			case 2: vAdjustedAngle.y = flBaseYaw + 180.f; break;	//backwards
			case 3: vAdjustedAngle.y = flBaseYaw - 90.f; break;		//side1
			case 4: vAdjustedAngle.y = flBaseYaw + 90.f; break;		//side2
			case 5: vAdjustedAngle.y += 180.f; break;				//invert
			case 6:{												//edge
				const bool bEdge = vAdjustedAngle.x == 89 ? F::AntiAim.FindEdge(flBaseYaw, pEntity) : !F::AntiAim.FindEdge(flBaseYaw, pEntity);
				vAdjustedAngle.y = flBaseYaw + (bEdge ? 90.f : -90.f);
				break;
			}
			case 7:{												//auto
				vAdjustedAngle.y = vYawRotations[mResolverData[pEntity].iYawIndex];
				break;
			}
			}